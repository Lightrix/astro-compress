import fs from "fs";
import FastGlob from "fast-glob";
import type { AstroIntegration } from "astro";
import Options from "./options";

// @ts-ignore
import * as cssoMinify from "csso";
// @ts-ignore
import * as htmlMinifierTerserMinify from "html-minifier-terser";
import { minify as terserMinify } from "terser";

import CSS from "./options/csso";
import HTML from "./options/html-minifier-terser";
import JS from "./options/terser";

const minify = async (
	glob: string,
	options: CSS | HTML | JS,
	parser: "csso" | "html-minifier-terser" | "terser"
) => {
	const files = await FastGlob(glob);

	for (const file of files) {
		switch (parser) {
			case "csso":
				await fs.promises.readFile(file, "utf-8").then(async (data) => {
					await fs.promises.writeFile(
						file,
						cssoMinify.minify(data, options).css,
						"utf-8"
					);
				});

				break;

			case "html-minifier-terser":
				await fs.promises.readFile(file, "utf-8").then(async (data) => {
					await htmlMinifierTerserMinify
						.minify(data, options)
						.then(async (minified: string) => {
							await fs.promises.writeFile(
								file,
								minified,
								"utf-8"
							);
						});
				});

				break;

			case "terser":
				await fs.promises.readFile(file, "utf-8").then(async (data) => {
					// @ts-ignore
					await terserMinify(data, options).then(
						async (minified: any) => {
							await fs.promises.writeFile(
								file,
								minified.code,
								"utf-8"
							);
						}
					);
				});
				break;

			default:
				break;
		}
	}
};

export default function createPlugin(
	integrationOptions: Options = {}
): AstroIntegration {
	const defaultOptions: Options = {
		path: "./dist/",
		css: {
			clone: false,
			comments: false,
			debug: false,
			forceMediaMerge: true,
			restructure: true,
			sourceMap: false,
		},
		html: {
			caseSensitive: true,
			collapseBooleanAttributes: true,
			collapseInlineTagWhitespace: false,
			collapseWhitespace: true,
			conservativeCollapse: false,
			continueOnParseError: false,
			customAttrAssign: [],
			customAttrCollapse: "",
			customAttrSurround: [],
			customEventAttributes: [/^on[a-z]{3,}$/],
			decodeEntities: false,
			html5: true,
			ignoreCustomComments: [],
			ignoreCustomFragments: [],
			includeAutoGeneratedTags: true,
			keepClosingSlash: true,
			maxLineLength: null,
			minifyCSS: true,
			minifyJS: true,
			minifyURLs: false,
			preserveLineBreaks: false,
			preventAttributesEscaping: false,
			processConditionalComments: true,
			processScripts: ["module"],
			quoteCharacter: "",
			removeAttributeQuotes: true,
			removeComments: true,
			removeEmptyAttributes: true,
			removeEmptyElements: false,
			removeOptionalTags: false,
			removeRedundantAttributes: true,
			removeScriptTypeAttributes: true,
			removeStyleLinkTypeAttributes: true,
			removeTagWhitespace: true,
			sortAttributes: true,
			sortClassName: true,
			trimCustomFragments: false,
			useShortDoctype: true,
		},
		js: {
			ecma: 5,
			enclose: false,
			keep_classnames: false,
			keep_fnames: false,
			ie8: false,
			module: false,
			safari10: false,
			toplevel: false,
		},
	};

	const options = Object.assign(defaultOptions, integrationOptions);

	options.path = options.path?.endsWith("/")
		? options.path
		: `${options.path}/`;

	return {
		name: "astro-compress",
		hooks: {
			"astro:build:done": async () => {
				if (options.css) {
					await minify(
						`${options.path}**/*.css`,
						options.css,
						"csso"
					);
				}

				if (options.html) {
					await minify(
						`${options.path}**/*.html`,
						options.html,
						"html-minifier-terser"
					);
				}

				if (options.js) {
					await minify(
						`${options.path}**/*.js`,
						options.js,
						"terser"
					);
				}
			},
		},
	};
}
