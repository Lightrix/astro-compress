import fs from "fs";
import FastGlob from "fast-glob";
import type { AstroIntegration } from "astro";
import Options from "./options";

// @ts-ignore
import * as csso from "csso";
// @ts-ignore
import * as htmlMinifierTerser from "html-minifier-terser";
import { minify as terserMinify } from "terser";
// @ts-ignore
import * as sharpMinify from "sharp";

const parse = async (glob: string, write: (data: string) => any) => {
	const files = await FastGlob(glob);

	for (const file of files) {
		try {
			await fs.promises.writeFile(
				file,
				await write(await fs.promises.readFile(file, "utf-8")),
				"utf-8"
			);
		} catch (error) {
			console.log("Error: Cannot minify file " + file + "!");
		}
	}
};

export default function createPlugin(
	integrationOptions: Options = {}
): AstroIntegration {
	const defaultOptions: Options = {
		path: "./dist/",
		css: {
			clone: false,
			comments: false,
			debug: false,
			forceMediaMerge: true,
			restructure: true,
			sourceMap: false,
		},
		html: {
			caseSensitive: true,
			collapseBooleanAttributes: true,
			collapseInlineTagWhitespace: false,
			collapseWhitespace: true,
			conservativeCollapse: false,
			continueOnParseError: false,
			customAttrAssign: [],
			customAttrCollapse: "",
			customAttrSurround: [],
			customEventAttributes: [/^on[a-z]{3,}$/],
			decodeEntities: false,
			html5: true,
			ignoreCustomComments: [],
			ignoreCustomFragments: [],
			includeAutoGeneratedTags: true,
			keepClosingSlash: true,
			maxLineLength: null,
			minifyCSS: true,
			minifyJS: true,
			minifyURLs: false,
			preserveLineBreaks: false,
			preventAttributesEscaping: false,
			processConditionalComments: true,
			processScripts: ["module"],
			quoteCharacter: "",
			removeAttributeQuotes: true,
			removeComments: true,
			removeEmptyAttributes: true,
			removeEmptyElements: false,
			removeOptionalTags: false,
			removeRedundantAttributes: true,
			removeScriptTypeAttributes: true,
			removeStyleLinkTypeAttributes: true,
			removeTagWhitespace: true,
			sortAttributes: true,
			sortClassName: true,
			trimCustomFragments: false,
			useShortDoctype: true,
		},
		js: {
			ecma: 5,
			enclose: false,
			keep_classnames: false,
			keep_fnames: false,
			ie8: false,
			module: false,
			safari10: false,
			toplevel: false,
		},
	};

	const options = Object.assign(defaultOptions, integrationOptions);

	options.path = options.path?.endsWith("/")
		? options.path
		: `${options.path}/`;

	return {
		name: "astro-compress",
		hooks: {
			"astro:build:done": async () => {
				if (options.css) {
					await parse(
						`${options.path}**/*.css`,
						(data) => csso.minify(data, options.css).css
					);
				}

				if (options.html) {
					await parse(
						`${options.path}**/*.html`,
						async (data) =>
							await htmlMinifierTerser.minify(data, options.html)
					);
				}

				if (options.js) {
					await parse(
						`${options.path}**/*.{js,mjs,cjs}`,
						async (data) =>
							(
								await terserMinify(data, options.js)
							).code
					);
				}

				if (options.img) {
					await parse(
						`${options.path}**/*.{png,jpeg,jpg,gif,ico}`,
						async (data) => { }
					);
				}
			},
		},
	};
}
