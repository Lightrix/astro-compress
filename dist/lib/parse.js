import u from"fast-glob";import*as s from"fs";import c from"./format-bytes.js";var g=async(p,l=2,m="",f,y=async e=>e,d=async e=>await s.promises.readFile(e,"utf-8"))=>{const e=await u(p),o={files:0,total:0};let r=new Set;if(typeof f<"u")if(f instanceof Array||f instanceof Set)for(const t of f)r.add(t);else r.add(f);for(const t of r){if(typeof t=="string")for(const i of e)i.match(t)&&e.splice(e.indexOf(i),1);if(typeof t=="function")for(const i of e)t(i)&&e.splice(e.indexOf(i),1)}for(const t of e)try{const i=(await s.promises.stat(t)).size,a=await y(await d(t));if(!a)continue;if(i>Buffer.byteLength(a)){await s.promises.writeFile(t,a,"utf-8");const n=(await s.promises.stat(t)).size;o.files++,o.total+=i-n,l>1&&console.info(`\x1B[32mCompressed ${t.replace(/^.*[\\\/]/,"")} for ${await c(i-n)} (${((i-n)/i*100).toFixed(2)}% reduction).\x1B[39m`)}}catch{console.log(`Error: Cannot compress file ${t}!`)}l>0&&o.files>0&&console.info(`\x1B[32mSuccessfully compressed a total of ${o.files} ${m.toUpperCase()} ${o.files===1?"file":"files"} for ${await c(o.total)}.\x1B[39m`)};export{g as default};
