import y from"fast-glob";import*as s from"fs";import c from"./format-bytes.js";var g=async(p,l=2,m="",f,d=async e=>e,u=async e=>await s.promises.readFile(e,"utf-8"))=>{const e=await y(p),o={files:0,total:0};let r=new Set;if(typeof f<"u")if(f instanceof Array)for(const i of f)r.add(i);else r.add(f);for(const i of r){if(typeof i=="string")for(const t of e)t.match(i)&&e.splice(e.indexOf(t),1);if(typeof i=="function")for(const t of e)i(t)&&e.splice(e.indexOf(t),1)}for(const i of e)try{const t=(await s.promises.stat(i)).size,a=await d(await u(i));if(!a)continue;if(t>Buffer.byteLength(a)){await s.promises.writeFile(i,a,"utf-8");const n=(await s.promises.stat(i)).size;o.files++,o.total+=t-n,l>1&&console.info(`\x1B[32mCompressed ${i.replace(/^.*[\\\/]/,"")} for ${await c(t-n)} (${((t-n)/t*100).toFixed(2)}% reduction).\x1B[39m`)}}catch{console.log(`Error: Cannot compress file ${i}!`)}l>0&&o.files>0&&console.info(`\x1B[32mSuccessfully compressed a total of ${o.files} ${m.toUpperCase()} ${o.files===1?"file":"files"} for ${await c(o.total)}.\x1B[39m`)};export{g as default};
