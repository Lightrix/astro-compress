import u from"./lib/format-bytes.js";import o from"files-pipeline/dist/lib/deepmerge.js";import c from"files-pipeline/dist/options/index.js";import m from"./options/index.js";import{files as l}from"files-pipeline";import{minify as d}from"csso";import{minify as h}from"html-minifier-terser";import p from"sharp";import{optimize as y}from"svgo";import{minify as w}from"terser";import b from"./lib/sharp-read.js";var I=(t={})=>{for(const r in t)Object.prototype.hasOwnProperty.call(t,r)&&t[r]===!0&&(t[r]=m[r]);t=o(m,t);const f=new Set;if(typeof t.path<"u"&&(t.path instanceof Array||t.path instanceof Set))for(const r of t.path)f.add(r);return{name:"astro-compress",hooks:{"astro:build:done":async({dir:r})=>{f.size||f.add(r);for(const[s,i]of Object.entries(t))if(i)for(const n of f)await(await(await(await new l(t.logger).in(n)).by(typeof t.map=="object"?t.map[s]:"")).not(t.exclude)).pipeline(o(t.pipeline,{wrote:async e=>{switch(s){case"css":return d(e.buffer.toString(),i).css;case"html":return await h(e.buffer.toString(),i);case"js":{const{code:a}=await w(e.buffer.toString(),i);return a||e.buffer}case"img":return b(i,e);case"svg":{const{data:a}=y(e.buffer.toString(),i);return typeof a<"u"?a:e.buffer}default:return e.buffer}},read:async e=>{switch(s){case"img":{const{format:a}=await p(e.inputPath).metadata();return p(e.inputPath,{failOn:"none",sequentialRead:!0,unlimited:!0,animated:a==="webp"||a==="gif"})}default:return await c.pipeline.read(e)}},fulfilled:async e=>e.files>0?`Successfully compressed a total of ${e.files} ${s.toUpperCase()} ${e.files===1?"file":"files"} for ${await u(e.info.total)}.`:!1}))}}}};export{I as default};
