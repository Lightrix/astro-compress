import fs from "fs";
import FastGlob from "fast-glob";
import * as cssMinify from "csso";
import * as htmlMinify from "html-minifier-terser";
function createPlugin(integrationOptions = {}) {
  var _a;
  const defaultOptions = {
    path: "./dist/",
    css: {
      clone: false,
      comments: false,
      debug: false,
      forceMediaMerge: true,
      restructure: true,
      sourceMap: false
    },
    html: {
      caseSensitive: true,
      collapseBooleanAttributes: true,
      collapseInlineTagWhitespace: false,
      collapseWhitespace: true,
      conservativeCollapse: false,
      continueOnParseError: false,
      customAttrAssign: [],
      customAttrCollapse: "",
      customAttrSurround: [],
      customEventAttributes: [/^on[a-z]{3,}$/],
      decodeEntities: false,
      html5: true,
      ignoreCustomComments: [],
      ignoreCustomFragments: [],
      includeAutoGeneratedTags: true,
      keepClosingSlash: true,
      maxLineLength: null,
      minifyCSS: true,
      minifyJS: true,
      minifyURLs: false,
      preserveLineBreaks: false,
      preventAttributesEscaping: false,
      processConditionalComments: true,
      processScripts: ["module"],
      quoteCharacter: "",
      removeAttributeQuotes: true,
      removeComments: true,
      removeEmptyAttributes: true,
      removeEmptyElements: false,
      removeOptionalTags: false,
      removeRedundantAttributes: true,
      removeScriptTypeAttributes: true,
      removeStyleLinkTypeAttributes: true,
      removeTagWhitespace: true,
      sortAttributes: true,
      sortClassName: true,
      trimCustomFragments: false,
      useShortDoctype: true
    }
  };
  const options = Object.assign(defaultOptions, integrationOptions);
  options.path = ((_a = options.path) == null ? void 0 : _a.endsWith("/")) ? options.path : `${options.path}/`;
  return {
    name: "astro-critters",
    hooks: {
      "astro:build:done": async ({ pages }) => {
        const files = {
          css: FastGlob.sync(`${options.path}**/*.css`),
          html: pages.map((page) => {
            const pathname = page.pathname.endsWith("/") ? page.pathname : `${page.pathname}/`;
            const file = pathname === "404/" ? "404.html" : `${pathname}index.html`;
            return `${options.path}${file}`;
          })
        };
        for (const type in files) {
          if (Object.prototype.hasOwnProperty.call(files, type)) {
            for (const file of files[type]) {
              const data = await fs.promises.readFile(file, "utf-8");
              switch (type) {
                case "css":
                  await fs.promises.writeFile(file, cssMinify.minify(data, options.css).css, "utf-8");
                  break;
                case "html":
                  await fs.promises.writeFile(file, await htmlMinify.minify(data, options.html), "utf-8");
                  break;
                default:
                  break;
              }
            }
          }
        }
      }
    }
  };
}
export {
  createPlugin as default
};
