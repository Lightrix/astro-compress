"use strict";import p from"fs";import g from"fast-glob";import*as h from"csso";import*as y from"html-minifier-terser";import{minify as d}from"terser";import v from"sharp";import b from"svgo";const u=async(t,i=2)=>{if(t===0)return"0 Bytes";const e=1024,a=i<0?0:i,s=["Bytes","KB","MB","GB","TB","PB","EB","ZB","YB"],o=Math.floor(Math.log(t)/Math.log(e));return parseFloat((t/Math.pow(e,o)).toFixed(a))+" "+s[o]},w=async(t,i={})=>{const e=t.options.input.file.split(".").pop();if(!e)return;const a={avci:"avif",avcs:"avif",avifs:"avif",heic:"heif",heics:"heif",heifs:"heif",jfif:"jpeg",jif:"jpeg",jpe:"jpeg",jpg:"jpeg"},s=typeof a[e]<"u"?a[e]:typeof i[e]<"u"?e:!1;if(["avif","gif","heif","jpeg","png","raw","tiff","webp"].includes(s)&&i[s]!==!1)return await t[s](i[s]).toBuffer()},j=async t=>{for(const i in t)if(Object.prototype.hasOwnProperty.call(t,i)){const e=t[i];if(!e)continue;const a=t.logger?t.logger:0;switch(i){case"css":await l(`${t.path}**/*.css`,a,i,s=>h.minify(s,e).css);break;case"html":await l(`${t.path}**/*.html`,a,i,async s=>await y.minify(s,e));break;case"js":await l(`${t.path}**/*.{js,mjs,cjs}`,a,i,async s=>(await d(s,e)).code);break;case"img":await l(`${t.path}**/*.{avci,avcs,avif,avifs,gif,heic,heics,heif,heifs,jfif,jif,jpe,jpeg,jpg,png,raw,tiff,webp}`,a,i,async s=>await w(s,e),async s=>await v(s));break;case"svg":await l(`${t.path}**/*.svg`,a,i,async s=>b.optimize(s,e).data);break;default:break}}},l=async(t,i=2,e="",a=async o=>o,s=async o=>await p.promises.readFile(o,"utf-8"))=>{let o={files:await g(t),sizebefore:0},f={files:0,total:0};for(;o.files.length>0;){const r=o.files.shift();if(r)try{const n=(await p.promises.stat(r)).size;o.sizebefore+=n;const c=await a(await s(r));if(!c)continue;if(n>Buffer.byteLength(c)){await p.promises.writeFile(r,c,"utf-8");const m=(await p.promises.stat(r)).size;f.files++,f.total+=n-m,i>1&&console.info("\x1B[32mCompressed "+r.replace(/^.*[\\\/]/,"")+" for "+await u(n-m)+" ("+((n-m)/n*100).toFixed(2)+"% reduction).\x1B[39m")}}catch{console.log("Error: Cannot compress file "+r+"!")}}i>0&&console.info("\x1B[32mSuccessfully compressed a total of "+f.files+" "+e.toUpperCase()+" "+(f.files===1?"file":"files")+" for "+await u(f.total)+".\x1B[39m")};function A(t={}){const e=Object.assign({path:"./dist/",css:{clone:!1,comments:!1,debug:!1,forceMediaMerge:!0,restructure:!0,sourceMap:!1},html:{caseSensitive:!0,collapseBooleanAttributes:!0,collapseInlineTagWhitespace:!1,collapseWhitespace:!0,conservativeCollapse:!1,continueOnParseError:!1,customAttrAssign:[],customAttrCollapse:"",customAttrSurround:[],customEventAttributes:[/^on[a-z]{3,}$/],decodeEntities:!1,html5:!0,ignoreCustomComments:[],ignoreCustomFragments:[],includeAutoGeneratedTags:!0,keepClosingSlash:!0,maxLineLength:null,minifyCSS:!0,minifyJS:!0,minifyURLs:!1,preserveLineBreaks:!1,preventAttributesEscaping:!1,processConditionalComments:!0,processScripts:["module"],quoteCharacter:"",removeAttributeQuotes:!0,removeComments:!0,removeEmptyAttributes:!0,removeEmptyElements:!1,removeOptionalTags:!1,removeRedundantAttributes:!0,removeScriptTypeAttributes:!0,removeStyleLinkTypeAttributes:!0,removeTagWhitespace:!0,sortAttributes:!0,sortClassName:!0,trimCustomFragments:!1,useShortDoctype:!1},js:{ecma:5,enclose:!1,keep_classnames:!1,keep_fnames:!1,ie8:!1,module:!1,safari10:!1,toplevel:!1},img:{avif:{chromaSubsampling:"4:4:4",effort:9},gif:{effort:10},heif:{chromaSubsampling:"4:4:4"},jpeg:{chromaSubsampling:"4:4:4",mozjpeg:!0,trellisQuantisation:!0,overshootDeringing:!0,optimiseScans:!0},png:{compressionLevel:9,palette:!0},raw:{},tiff:{compression:"lzw"},webp:{effort:6}},svg:{multipass:!0,js2svg:{indent:0,pretty:!1},plugins:["preset-default"]},logger:2},t);return{name:"astro-compress",hooks:{"astro:config:done":async a=>{e.path=e.path?e.path:a.config.outDir.toString()},"astro:build:done":async()=>{await j(e)}}}}export{A as default};
