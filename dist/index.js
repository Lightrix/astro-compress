import c from"./lib/format-bytes.js";import o from"files-pipe/lib/deepmerge.js";import m from"./options/index.js";import{files as u}from"files-pipe";import{minify as n}from"csso";import{minify as l}from"html-minifier-terser";import{optimize as d}from"svgo";import{minify as y}from"terser";var P=(t={})=>{for(const r in t)Object.prototype.hasOwnProperty.call(t,r)&&t[r]===!0&&(t[r]=m[r]);t=o(m,t);const i=new Set;if(typeof t.path<"u"&&(t.path instanceof Array||t.path instanceof Set))for(const r of t.path)i.add(r);return{name:"astro-compress",hooks:{"astro:build:done":async({dir:r})=>{i.size||i.add(r);for(const[s,f]of Object.entries(t))if(f)for(const p of i)await(await(await(await new u(t.logger).in(p)).by(typeof t.map=="object"?t.map[s]:"")).not(t.exclude)).pipe(o(t.pipe,{wrote:async e=>{switch(s){case"css":return n(e.buffer.toString(),f).css;case"html":return await l(e.buffer.toString(),f);case"js":{const{code:a}=await y(e.buffer.toString(),f);return a||e.buffer}case"svg":{const{data:a}=d(e.buffer.toString(),f);return typeof a<"u"?a:e.buffer}default:return e.buffer}},fulfilled:async e=>e.files>0?`Successfully compressed a total of ${e.files} ${s.toUpperCase()} ${e.files===1?"file":"files"} for ${await c(e.info.total)}.`:!1}))}}}};export{P as default};
