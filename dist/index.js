import l from"fs";import u from"fast-glob";import*as g from"csso";import*as h from"html-minifier-terser";import{minify as y}from"terser";import d from"sharp";import v from"svgo";function m(t,a=2){if(t===0)return"0 Bytes";const e=1024,s=a<0?0:a,i=["Bytes","KB","MB","GB","TB","PB","EB","ZB","YB"],r=Math.floor(Math.log(t)/Math.log(e));return parseFloat((t/Math.pow(e,r)).toFixed(s))+" "+i[r]}const w=async(t,a={})=>{const e=t.options.input.file.split(".").pop();if(!e)return;const s={avci:"avif",avcs:"avif",avifs:"avif",heic:"heif",heics:"heif",heifs:"heif",jfif:"jpeg",jif:"jpeg",jpe:"jpeg",jpg:"jpeg"},i=typeof s[e]<"u"?s[e]:typeof a[e]<"u"?e:!1;if(["avif","gif","heif","jpeg","png","raw","tiff","webp"].includes(i)&&a[i]!==!1)return await t[i](a[i]).toBuffer()},b=async t=>{for(const a in t)if(Object.prototype.hasOwnProperty.call(t,a)){const e=t[a];switch(a){case"css":await f(`${t.path}**/*.css`,t.logger,s=>g.minify(s,e).css);break;case"html":await f(`${t.path}**/*.html`,t.logger,async s=>await h.minify(s,e));break;case"js":await f(`${t.path}**/*.{js,mjs,cjs}`,t.logger,async s=>{const i=await y(s,e);return i.code?i.code:s});break;case"img":await f(`${t.path}**/*.{avci,avcs,avif,avifs,gif,heic,heics,heif,heifs,jfif,jif,jpe,jpeg,jpg,png,raw,tiff,webp}`,t.logger,async s=>await w(s,e),async s=>await d(s));break;case"svg":await f(`${t.path}**/*.svg`,t.logger,async s=>v.optimize(s,e).data);break;default:break}}},f=async(t,a=2,e=async i=>i,s=async i=>await l.promises.readFile(i,"utf-8"))=>{const i=await u(t);let r={files:0,size:0};for(const o of i)try{const n=(await l.promises.stat(o)).size,p=await e(await s(o));if(!p)return;if(n>Buffer.byteLength(p)){await l.promises.writeFile(o,p,"utf-8");const c=(await l.promises.stat(o)).size;r.files++,r.size+=n-c,a>1&&console.info("\x1B[32mCompressed "+o.replace(/^.*[\\\/]/,"")+" for "+m(n-c)+" ("+(c/n*100).toFixed(2)+"% compression rate).\x1B[39m")}}catch{console.log("Error: Cannot compress file "+o+"!")}a>0&&r.files>0&&console.info("\x1B[32mSuccessfully compressed a total of "+r.files+" files for "+m(r.size)+".\x1B[39m")};function j(t={}){var s;const e=Object.assign({path:"./dist/",css:{clone:!1,comments:!1,debug:!1,forceMediaMerge:!0,restructure:!0,sourceMap:!1},html:{caseSensitive:!0,collapseBooleanAttributes:!0,collapseInlineTagWhitespace:!1,collapseWhitespace:!0,conservativeCollapse:!1,continueOnParseError:!1,customAttrAssign:[],customAttrCollapse:"",customAttrSurround:[],customEventAttributes:[/^on[a-z]{3,}$/],decodeEntities:!1,html5:!0,ignoreCustomComments:[],ignoreCustomFragments:[],includeAutoGeneratedTags:!0,keepClosingSlash:!0,maxLineLength:null,minifyCSS:!0,minifyJS:!0,minifyURLs:!1,preserveLineBreaks:!1,preventAttributesEscaping:!1,processConditionalComments:!0,processScripts:["module"],quoteCharacter:"",removeAttributeQuotes:!0,removeComments:!0,removeEmptyAttributes:!0,removeEmptyElements:!1,removeOptionalTags:!1,removeRedundantAttributes:!0,removeScriptTypeAttributes:!0,removeStyleLinkTypeAttributes:!0,removeTagWhitespace:!0,sortAttributes:!0,sortClassName:!0,trimCustomFragments:!1,useShortDoctype:!1},js:{ecma:5,enclose:!1,keep_classnames:!1,keep_fnames:!1,ie8:!1,module:!1,safari10:!1,toplevel:!1},img:{avif:{chromaSubsampling:"4:4:4",effort:9},gif:{effort:10},heif:{chromaSubsampling:"4:4:4"},jpeg:{chromaSubsampling:"4:4:4",mozjpeg:!0,trellisQuantisation:!0,overshootDeringing:!0,optimiseScans:!0},png:{compressionLevel:9,palette:!0},raw:{},tiff:{compression:"lzw"},webp:{effort:6}},svg:{multipass:!0,js2svg:{indent:0,pretty:!1},plugins:["preset-default"]},logger:2},t);return e.path=(s=e.path)!=null&&s.endsWith("/")?e.path:`${e.path}/`,{name:"astro-compress",hooks:{"astro:config:done":async i=>{e.path=e.path?e.path:i.config.outDir.toString()},"astro:build:done":async()=>{await b(e)}}}}export{j as default};
