const{default:p}=await import("./Option/Index.js"),{minify:d}=await import("csso"),{Bytes:l,Merge:n,Default:c}=await import("files-pipe"),{minify:h}=await import("html-minifier-terser"),{default:u}=await import("sharp");var w=(o={})=>{for(const a in o)Object.prototype.hasOwnProperty.call(o,a)&&o[a]===!0&&(o[a]=p[a]);const e=n(p,o),f=new Set;if(typeof e.Path<"u"&&(e.Path instanceof Array||e.Path instanceof Set))for(const a of e.Path)f.add(a);return{name:"astro-compress",hooks:{"astro:build:done":async({dir:a})=>{f.size||f.add(a),c.Cache&&e.Cache&&e.Cache.Search===c.Cache.Search&&(e.Cache.Search=a);for(const[s,i]of Object.entries(e))if(i)for(const m of f)await(await(await(await new(await import("files-pipe")).default(e.Cache,e.Logger).In(m)).By(typeof e.Map=="object"?e.Map[s]:"")).Not(e.Exclude)).Pipe(n(e.Action,n(e.Action,{Wrote:async t=>{switch(s){case"CSS":return d(t.Buffer.toString(),i).css;case"HTML":return await h(t.Buffer.toString(),i);case"JavaScript":{const{code:r}=await(await import("terser")).minify(t.Buffer.toString(),i);return r||t.Buffer}case"Image":return(await import("./Fn/Sharp.js")).default(i,t);case"SVG":{const{data:r}=(await import("svgo")).optimize(t.Buffer.toString(),i);return typeof r<"u"?r:t.Buffer}default:return t.Buffer}},Read:async t=>{switch(s){case"Image":{const{format:r}=await u(t.Input).metadata();return u(t.Input,{failOn:"none",sequentialRead:!0,unlimited:!0,animated:r==="webp"||r==="gif"})}default:return await c.Action.Read(t)}},Fulfilled:async t=>t.Files>0?`Successfully compressed a total of ${t.Files} ${s} ${t.Files===1?"file":"files"} for ${await l(t.Info.Total)}.`:!1})))}}}};export{l as Bytes,d as CSSO,p as Default,h as HTMLMinifierTerser,n as Merge,c as _Default,w as default,u as sharp};
