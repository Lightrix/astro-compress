/**
 * @module Option
 *
 */
declare const _default: {
    CSS: {
        csso: import("../Interface/CSS/csso.js").default;
        lightningcss: import("../Interface/CSS/lightningcss.js").default;
    };
    HTML: {
        "html-minifier-terser": {
            caseSensitive: true;
            collapseInlineTagWhitespace: false;
            collapseWhitespace: true;
            continueOnParseError: true;
            html5: true;
            ignoreCustomComments: RegExp[];
            ignoreCustomFragments: never[];
            includeAutoGeneratedTags: true;
            keepClosingSlash: true;
            minifyCSS: true;
            minifyJS: true;
            minifyURLs: false;
            noNewlinesBeforeTagClose: true;
            preventAttributesEscaping: false;
            processConditionalComments: false;
            processScripts: string[];
            quoteCharacter: string;
            removeAttributeQuotes: true;
            removeComments: true;
            removeScriptTypeAttributes: true;
            removeStyleLinkTypeAttributes: true;
            removeTagWhitespace: false;
            sortAttributes: true;
            sortClassName: true;
            trimCustomFragments: true;
            useShortDoctype: false;
        };
    };
    JavaScript: {
        terser: {
            ecma: 5;
            enclose: false;
            keep_classnames: false;
            keep_fnames: false;
            ie8: false;
            module: false;
            safari10: false;
            toplevel: false;
            format: {
                comments: false;
            };
        };
    };
    Image: {
        sharp: import("../Interface/Image/sharp.js").default;
    };
    SVG: {
        svgo: {
            multipass: true;
            js2svg: {
                indent: number;
                pretty: false;
            };
            plugins: "preset-default"[];
        };
    };
    Map: import("../Interface/Map.js").default;
    Parser: import("../Interface/Parser.js").default;
    Action: {
        Failed: ({ Input }: {
            Input: any;
        }) => Promise<string>;
        Passed: ({ Before, Buffer }: {
            Before: any;
            Buffer: any;
        }) => Promise<boolean>;
        Accomplished: ({ Input, Before, After }: {
            Input: any;
            Before: any;
            After: any;
        }) => Promise<string>;
        Changed: (Plan: any) => Promise<any>;
    };
};
export default _default;
