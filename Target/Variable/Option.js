import{gray as r,blue as l,green as m,red as s}from"kleur/colors";var g=(await import("typescript-esbuild/Target/Function/Merge.js")).default((await import("files-pipe/Target/Variable/Option.js")).default,{CSS:{csso:(await import("./CSS/csso.js")).default,lightningcss:(await import("./CSS/lightningcss.js")).default},HTML:{"html-minifier-terser":(await import("./HTML/html-minifier-terser.js")).default},JavaScript:{terser:(await import("./JavaScript/terser.js")).default},Image:{sharp:(await import("./Image/sharp.js")).default},SVG:{svgo:(await import("./SVG/svgo.js")).default},Map:(await import("./Map.js")).default,Parser:(await import("./Parser.js")).default,Action:{Failed:async({Input:t})=>{const e=t.lastIndexOf("/"),i=t.slice(e+1),a=t.slice(0,e+1);return`${s("Error:")} Cannot compress file ${r(a)}${s(i)}`},Passed:async({Before:t,Buffer:e})=>t>Buffer.byteLength(e.toString()),Accomplished:async({Input:t,Before:e,After:i})=>{const a=e-i,c=`${(a/e*100).toFixed(2)}%`,n=`(-${await(await import("files-pipe/Target/Function/Bytes.js")).default(a)})`,o=t.lastIndexOf("/"),f=t.slice(o+1),d=t.slice(0,o+1);return process.stderr.write("\u251C\u2500 "),`${r(n)}	${m(c)} reduction in ${r(d)}${l(f)}`},Changed:async t=>Object.defineProperty(t.Info,"Total",{value:(t.Info.Total?t.Info.Total:0)+(t.On.Before-t.On.After),configurable:!0})&&t}});export{g as default};
