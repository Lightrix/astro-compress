var M=(...[r={}])=>{Object.entries(r).forEach(([a,e])=>Object.defineProperty(r,a,{value:e===!0?S[a]:r[a]}));const{Path:o,Cache:s,Logger:u,Map:m,Exclude:g,Action:l,CSS:w,HTML:h,Image:j,JavaScript:T,SVG:I,Parser:y}=c(S,r),n=new Set;return typeof o<"u"&&(Array.isArray(o)||o instanceof Set)&&o.forEach(a=>n.add(a)),typeof y=="object"&&Object.entries(y).forEach(([a,e])=>Object.defineProperty(y,a,{value:Array.isArray(e)?e:[e]})),{name:"astro-compress",hooks:{"astro:build:done":async({dir:a})=>{if(typeof m=="object"){n.size||n.add(a),typeof s=="object"&&s.Search===b&&(s.Search=a);for(const[e,i]of Object.entries({CSS:w,HTML:h,Image:j,JavaScript:T,SVG:I})){if(!(i&&m[e]))return;f=c(l,c(l,{Wrote:async({Buffer:t,Input:p})=>{switch(e){case"CSS":return(await import("csso")).minify(t.toString(),i).css;case"HTML":return await(await import("html-minifier-terser")).minify(t.toString(),i);case"JavaScript":return(await(await import("terser")).minify(t.toString(),i)).code??t;case"Image":return(await import("../Function/Image.js")).default(i,{Buffer:t,Input:p});case"SVG":{const{data:A}=(await import("svgo")).optimize(t.toString(),i);return A??t}default:return t}},Fulfilled:async t=>t.Files>0?`Successfully compressed a total of ${t.Files} ${e} ${t.Files===1?"file":"files"} for ${await(await import("files-pipe/Target/Function/Bytes.js")).default(t.Info.Total)}.`:!1})),e==="Image"&&(f=c(f,{Read:async({Input:t})=>{const{format:p}=await d(t).metadata();return d(t,{failOn:"none",sequentialRead:!0,unlimited:!0,animated:p==="webp"||p==="gif"})}}));for(const t of n)await(await(await(await new(await import("files-pipe")).default(s,u).In(t)).By(m[e]??"**/*")).Not(g)).Pipe(f)}}}}}};const{default:S}=await import("../Variable/Option.js"),{default:{Cache:{Search:b}}}=await import("files-pipe/Target/Variable/Option.js"),{default:c}=await import("typescript-esbuild/Target/Function/Merge.js"),{default:d}=await import("sharp");let f;export{S as Default,c as Merge,b as Search,f as _Action,M as default,d as sharp};
