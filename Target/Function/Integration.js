let p;var x=(...[o={}])=>{Object.entries(o).forEach(([a,e])=>Object.defineProperty(o,a,{value:e===!0?w[a]:o[a]}));const{Path:s,Cache:n,Logger:h,Map:y,Exclude:u,Action:d,CSS:S,HTML:b,Image:j,JavaScript:A,SVG:I,Parser:l}=f(w,o),c=new Set;return typeof s<"u"&&(Array.isArray(s)||s instanceof Set)&&s.forEach(a=>c.add(a)),typeof l=="object"&&Object.entries(l).forEach(([a,e])=>Object.defineProperty(l,a,{value:Array.isArray(e)?e:[e]})),{name:"@playform/compress",hooks:{"astro:config:done":async({config:{outDir:{pathname:a}}})=>{p=(await import("path")).parse(a).dir.replace(/\\/g,"/"),p.startsWith("/")&&(p=p.substring(1))},"astro:build:done":async({dir:a})=>{if(console.log(`
${(await import("kleur/colors")).bgGreen((await import("kleur/colors")).black(" Compress "))}`),typeof y=="object"){c.size||c.add(a),typeof n=="object"&&n.Search===T&&(n.Search=a);for(const[e,r]of Object.entries({CSS:S,HTML:b,Image:j,JavaScript:A,SVG:I}))if(!(!(r&&y[e])||typeof r!="object")){m=f(d,f(d,{Wrote:async({Buffer:t,Input:i})=>{switch(e){case"CSS":return(await import("csso")).minify(t.toString(),r.csso).css;case"HTML":return await(await import("html-minifier-terser")).minify(t.toString(),r["html-minifier-terser"]);case"JavaScript":return(await(await import("terser")).minify(t.toString(),r.terser)).code??t;case"Image":try{return t instanceof g?await(await import("./Image/Writesharp.js")).default(r.sharp,{Buffer:t,Input:i}):t}catch(P){return console.log(P),t}case"SVG":return(await import("svgo")).optimize(t.toString(),r.svgo).data??t;default:return t}},Fulfilled:async({File:t,Info:{Total:i}})=>t>0?`${(await import("kleur/colors")).green(`\u2713\u2000Successfully compressed a total of ${t} ${e} ${t===1?"file":"files"} for ${await(await import("@playform/pipe/Target/Function/Bytes.js")).default(i)}.`)}`:!1})),e==="Image"&&(m=f(m,{Read:async({Input:t,Buffer:i})=>i}));for(const t of c)await(await(await(await new(await import("@playform/pipe")).default(n,h).In(t)).By(y[e]??"**/*")).Not(u)).Pipe(m)}}}}}};const{default:w}=await import("../Variable/Option.js"),{default:{Cache:{Search:T}}}=await import("@playform/pipe/Target/Variable/Option.js"),{default:f}=await import("./Merge.js"),{default:g}=await import("sharp");g.cache(!1);let m;export{w as Default,g as Defaultsharp,f as Merge,T as Search,p as System,m as _Action,x as default};
