var M=(...[i={}])=>{Object.entries(i).forEach(([a,e])=>Object.defineProperty(i,a,{value:e===!0?d[a]:i[a]}));const{Path:o,Cache:s,Logger:u,Map:m,Exclude:S,Action:y,CSS:w,HTML:h,Image:T,JavaScript:j,SVG:I}=n(d,i),p=new Set;return typeof o<"u"&&(Array.isArray(o)||o instanceof Set)&&o.forEach(a=>p.add(a)),{name:"astro-compress",hooks:{"astro:build:done":async({dir:a})=>{typeof m=="object"&&(p.size||p.add(a),typeof s=="object"&&s.Search===A&&(s.Search=a),Object.entries({CSS:w,HTML:h,Image:T,JavaScript:j,SVG:I}).forEach(async([e,r])=>{r&&m[e]&&(f=n(y,n(y,{Wrote:async({Buffer:t,Input:c})=>{switch(e){case"CSS":return(await import("csso")).minify(t.toString(),r).css;case"HTML":return await(await import("html-minifier-terser")).minify(t.toString(),r);case"JavaScript":return(await(await import("terser")).minify(t.toString(),r)).code??t;case"Image":return(await import("../Function/Image.js")).default(r,{Buffer:t,Input:c});case"SVG":{const{data:g}=(await import("svgo")).optimize(t.toString(),r);return g??t}default:return t}},Fulfilled:async t=>t.Files>0?`Successfully compressed a total of ${t.Files} ${e} ${t.Files===1?"file":"files"} for ${await(await import("files-pipe/Target/Function/Bytes.js")).default(t.Info.Total)}.`:!1})),e==="Image"&&(f=n(f,{Read:async({Input:t})=>{const{format:c}=await l(t).metadata();return l(t,{failOn:"none",sequentialRead:!0,unlimited:!0,animated:c==="webp"||c==="gif"})}})),p.forEach(async t=>await(await(await(await new(await import("files-pipe")).default(s,u).In(t)).By(m[e]??"**/*")).Not(S)).Pipe(f)))}))}}}};const{default:d}=await import("../Variable/Option.js"),{default:{Cache:{Search:A}}}=await import("files-pipe/Target/Variable/Option.js"),{default:n}=await import("typescript-esbuild/Target/Function/Merge.js"),{default:l}=await import("sharp");let f;export{d as Default,n as Merge,A as Search,f as _Action,M as default,l as sharp};
