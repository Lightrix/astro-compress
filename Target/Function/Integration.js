<<<<<<< HEAD
let c;var P=(...[r={}])=>{Object.entries(r).forEach(([e,a])=>Object.defineProperty(r,e,{value:a===!0?y[e]:r[e]}));const{Path:o,Cache:s,Logger:w,Map:p,Exclude:g,Action:m,CSS:u,HTML:S,JavaScript:h,SVG:b,Parser:f}=l(y,r),n=new Set;return typeof o<"u"&&(Array.isArray(o)||o instanceof Set)&&o.forEach(e=>n.add(e)),typeof f=="object"&&Object.entries(f).forEach(([e,a])=>Object.defineProperty(f,e,{value:Array.isArray(a)?a:[a]})),{name:"astro-compress",hooks:{"astro:config:done":async({config:{outDir:{pathname:e}}})=>{c=(await import("path")).parse(e).dir.replace(/\\/g,"/"),c.startsWith("/")&&(c=c.substring(1))},"astro:build:done":async({dir:e})=>{if(console.log(`
${(await import("kleur/colors")).bgGreen((await import("kleur/colors")).black(" AstroCompress processing "))}`),typeof p=="object"){n.size||n.add(e),typeof s=="object"&&s.Search===A&&(s.Search=e);for(const[a,i]of Object.entries({CSS:u,HTML:S,JavaScript:h,SVG:b}))if(!(!(i&&p[a])||typeof i!="object")){d=l(m,l(m,{Wrote:async({Buffer:t,Input:T})=>{switch(a){case"CSS":return(await import("csso")).minify(t.toString(),i.csso).css;case"HTML":return await(await import("html-minifier-terser")).minify(t.toString(),i["html-minifier-terser"]);case"JavaScript":return(await(await import("terser")).minify(t.toString(),i.terser)).code??t;case"SVG":{const{data:j}=(await import("svgo")).optimize(t.toString(),i.svgo);return j??t}default:return t}},Fulfilled:async t=>t.Files>0?`${(await import("kleur/colors")).green(`\u2713 Successfully compressed a total of ${t.Files} ${a} ${t.Files===1?"file":"files"} for ${await(await import("files-pipe/Target/Function/Bytes.js")).default(t.Info.Total)}.`)}`:!1}));for(const t of n)await(await(await(await new(await import("files-pipe")).default(s,w).In(t)).By(p[a]??"**/*")).Not(g)).Pipe(d)}}}}}};const{default:y}=await import("../Variable/Option.js"),{default:{Cache:{Search:A}}}=await import("files-pipe/Target/Variable/Option.js"),{default:l}=await import("typescript-esbuild/Target/Function/Merge.js");let d;export{y as Default,l as Merge,A as Search,c as System,d as _Action,P as default};
=======
let p;var P=(...[r={}])=>{Object.entries(r).forEach(([e,a])=>Object.defineProperty(r,e,{value:a===!0?u[e]:r[e]}));const{Path:o,Cache:s,Logger:g,Map:l,Exclude:h,Action:d,CSS:S,HTML:b,Image:j,JavaScript:A,SVG:T,Parser:y}=f(u,r),n=new Set;return typeof o<"u"&&(Array.isArray(o)||o instanceof Set)&&o.forEach(e=>n.add(e)),typeof y=="object"&&Object.entries(y).forEach(([e,a])=>Object.defineProperty(y,e,{value:Array.isArray(a)?a:[a]})),{name:"astro-compress",hooks:{"astro:config:done":async({config:{outDir:{pathname:e}}})=>{p=(await import("path")).parse(e).dir.replace(/\\/g,"/"),p.startsWith("/")&&(p=p.substring(1))},"astro:build:done":async({dir:e})=>{if(console.log(`
${(await import("kleur/colors")).bgGreen((await import("kleur/colors")).black(" AstroCompress processing "))}`),typeof l=="object"){n.size||n.add(e),typeof s=="object"&&s.Search===x&&(s.Search=e);for(const[a,i]of Object.entries({CSS:S,HTML:b,Image:j,JavaScript:A,SVG:T}))if(!(!(i&&l[a])||typeof i!="object")){m=f(d,f(d,{Wrote:async({Buffer:t,Input:c})=>{switch(a){case"CSS":return(await import("csso")).minify(t.toString(),i.csso).css;case"HTML":return await(await import("html-minifier-terser")).minify(t.toString(),i["html-minifier-terser"]);case"JavaScript":return(await(await import("terser")).minify(t.toString(),i.terser)).code??t;case"Image":return await(await import("../Function/Image/Writesharp.js")).default(i.sharp,{Buffer:t,Input:c});case"SVG":{const{data:I}=(await import("svgo")).optimize(t.toString(),i.svgo);return I??t}default:return t}},Fulfilled:async t=>t.Files>0?`${(await import("kleur/colors")).green(`\u2713 Successfully compressed a total of ${t.Files} ${a} ${t.Files===1?"file":"files"} for ${await(await import("files-pipe/Target/Function/Bytes.js")).default(t.Info.Total)}.`)}`:!1})),a==="Image"&&(m=f(m,{Read:async({Input:t})=>{const{format:c}=await w(t).metadata();return w(t,{failOn:"none",sequentialRead:!0,unlimited:!0,animated:c==="webp"||c==="gif"})}}));for(const t of n)await(await(await(await new(await import("files-pipe")).default(s,g).In(t)).By(l[a]??"**/*")).Not(h)).Pipe(m)}}}}}};const{default:u}=await import("../Variable/Option.js"),{default:{Cache:{Search:x}}}=await import("files-pipe/Target/Variable/Option.js"),{default:f}=await import("../Function/Merge.js"),{default:w}=await import("sharp");let m;export{u as Default,w as Defaultsharp,f as Merge,x as Search,p as System,m as _Action,P as default};
>>>>>>> origin/main
