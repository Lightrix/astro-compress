var P=(...[r={}])=>{Object.entries(r).forEach(([a,e])=>Object.defineProperty(r,a,{value:e===!0?d[a]:r[a]}));const{Path:o,Cache:s,Logger:w,Map:m,Exclude:h,Action:y,CSS:g,HTML:S,Image:b,JavaScript:j,SVG:A,Parser:l}=p(d,r),n=new Set;return typeof o<"u"&&(Array.isArray(o)||o instanceof Set)&&o.forEach(a=>n.add(a)),typeof l=="object"&&Object.entries(l).forEach(([a,e])=>Object.defineProperty(l,a,{value:Array.isArray(e)?e:[e]})),{name:"astro-compress",hooks:{"astro:build:done":async({dir:a})=>{if(console.log(`
${(await import("kleur")).bgGreen((await import("kleur")).black(" astro-compress processing "))}
`),typeof m=="object"){n.size||n.add(a),typeof s=="object"&&s.Search===I&&(s.Search=a);for(const[e,i]of Object.entries({CSS:g,HTML:S,Image:b,JavaScript:j,SVG:A})){if(!(i&&m[e])||typeof i!="object")return;f=p(y,p(y,{Wrote:async({Buffer:t,Input:c})=>{switch(e){case"CSS":return(await import("csso")).minify(t.toString(),i.csso).css;case"HTML":return await(await import("html-minifier-terser")).minify(t.toString(),i["html-minifier-terser"]);case"JavaScript":return(await(await import("terser")).minify(t.toString(),i.terser)).code??t;case"Image":return await(await import("../Function/Image/Writesharp.js")).default(i.sharp,{Buffer:t,Input:c});case"SVG":{const{data:T}=(await import("svgo")).optimize(t.toString(),i.svgo);return T??t}default:return t}},Fulfilled:async t=>t.Files>0?`\u2514\u25B6 ${cyan(`Successfully compressed a total of ${t.Files} ${e} ${t.Files===1?"file":"files"} for ${await(await import("files-pipe/Target/Function/Bytes.js")).default(t.Info.Total)}.`)}`:!1})),e==="Image"&&(f=p(f,{Read:async({Input:t})=>{const{format:c}=await u(t).metadata();return u(t,{failOn:"none",sequentialRead:!0,unlimited:!0,animated:c==="webp"||c==="gif"})}}));for(const t of n)await(await(await(await new(await import("files-pipe")).default(s,w).In(t)).By(m[e]??"**/*")).Not(h)).Pipe(f)}}}}}};const{default:d}=await import("../Variable/Option.js"),{default:{Cache:{Search:I}}}=await import("files-pipe/Target/Variable/Option.js"),{default:p}=await import("typescript-esbuild/Target/Function/Merge.js"),{default:u}=await import("sharp");let f;export{d as Default,u as Defaultsharp,p as Merge,I as Search,f as _Action,P as default};
