let c;var I=(...[o={}])=>{Object.entries(o).forEach(([a,e])=>Object.defineProperty(o,a,{value:e===!0?w[a]:o[a]}));const{Path:s,Cache:n,Logger:g,Map:l,Exclude:h,Action:u,CSS:S,HTML:b,Image:j,JavaScript:A,SVG:P,Parser:y}=f(w,o),p=new Set;return typeof s<"u"&&(Array.isArray(s)||s instanceof Set)&&s.forEach(a=>p.add(a)),typeof y=="object"&&Object.entries(y).forEach(([a,e])=>Object.defineProperty(y,a,{value:Array.isArray(e)?e:[e]})),{name:"@playform/compress-astro",hooks:{"astro:config:done":async({config:{outDir:{pathname:a}}})=>{c=(await import("path")).parse(a).dir.replace(/\\/g,"/"),c.startsWith("/")&&(c=c.substring(1))},"astro:build:done":async({dir:a})=>{if(console.log(`
${(await import("kleur/colors")).bgGreen((await import("kleur/colors")).black(" CompressAstro "))}`),typeof l=="object"){p.size||p.add(a),typeof n=="object"&&n.Search===T&&(n.Search=a);for(const[e,r]of Object.entries({CSS:S,HTML:b,Image:j,JavaScript:A,SVG:P}))if(!(!(r&&l[e])||typeof r!="object")){m=f(u,f(u,{Wrote:async({Buffer:t,Input:i})=>{switch(e){case"CSS":return(await import("csso")).minify(t.toString(),r.csso).css;case"HTML":return await(await import("html-minifier-terser")).minify(t.toString(),r["html-minifier-terser"]);case"JavaScript":return(await(await import("terser")).minify(t.toString(),r.terser)).code??t;case"Image":return await(await import("../Function/Image/Writesharp.js")).default(r.sharp,{Buffer:t,Input:i});case"SVG":return(await import("svgo")).optimize(t.toString(),r.svgo).data??t;default:return t}},Fulfilled:async({File:t,Info:{Total:i}})=>t>0?`${(await import("kleur/colors")).green(`\u2713\u2000Successfully compressed a total of ${t} ${e} ${t===1?"file":"files"} for ${await(await import("@playform/file-pipe/Target/Function/Bytes.js")).default(i)}.`)}`:!1})),e==="Image"&&(m=f(m,{Read:async({Input:t})=>{const{format:i}=await d(t).metadata();return d(t,{failOn:"error",sequentialRead:!0,unlimited:!0,animated:i==="webp"||i==="gif"})}}));for(const t of p)await(await(await(await new(await import("@playform/file-pipe")).default(n,g).In(t)).By(l[e]??"**/*")).Not(h)).Pipe(m)}}}}}};const{default:w}=await import("../Variable/Option.js"),{default:{Cache:{Search:T}}}=await import("@playform/file-pipe/Target/Variable/Option.js"),{default:f}=await import("../Function/Merge.js"),{default:d}=await import("sharp");d.cache(!1);let m;export{w as Default,d as Defaultsharp,f as Merge,T as Search,c as System,m as _Action,I as default};
