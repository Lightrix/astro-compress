var O=(o={})=>{for(const a in o)Object.prototype.hasOwnProperty.call(o,a)&&o[a]===!0&&(o[a]=y[a]);const{Path:i,Cache:s,Logger:S,Map:f,Exclude:w,Action:d,CSS:h,HTML:I,Image:j,JavaScript:g,SVG:A}=p(y,o),n=new Set;if(typeof i<"u"&&(i instanceof Array||i instanceof Set))for(const a of i)n.add(a);return{name:"astro-compress",hooks:{"astro:build:done":async({dir:a})=>{typeof f=="object"&&(n.size||n.add(a),typeof s=="object"&&s.Search===M&&(s.Search=a),Object.entries({CSS:h,HTML:I,Image:j,JavaScript:g,SVG:A}).forEach(async([r,e])=>{if(!e||!f[r])return;let m=p(d,p(d,{Wrote:async({Buffer:t,Input:c})=>{switch(r){case"CSS":return(await import("csso")).minify(t.toString(),e).css;case"HTML":return await(await import("html-minifier-terser")).minify(t.toString(),e);case"JavaScript":return(await(await import("terser")).minify(t.toString(),e)).code??t;case"Image":return(await import("../Function/Image.js")).default(e,{Buffer:t,Input:c});case"SVG":{const{data:l}=(await import("svgo")).optimize(t.toString(),e);return l||t}default:return t}},Fulfilled:async t=>t.Files>0?`Successfully compressed a total of ${t.Files} ${r} ${t.Files===1?"file":"files"} for ${await(await import("files-pipe/Target/Function/Bytes.js")).default(t.Info.Total)}.`:!1}));r==="Image"&&(m=p(m,{Read:async({Input:t})=>{const{format:c}=await u(t).metadata();return u(t,{failOn:"none",sequentialRead:!0,unlimited:!0,animated:c==="webp"||c==="gif"})}}));for(const t of n)await(await(await(await new(await import("files-pipe")).default(s,S).In(t)).By(f[r]??"**/*")).Not(w)).Pipe(m)}))}}}};const{default:y}=await import("../Object/Option.js"),{default:{Cache:{Search:M}}}=await import("files-pipe/Target/Object/Option.js"),{default:p}=await import("typescript-esbuild/Target/Function/Merge.js"),{default:u}=await import("sharp");export{y as Default,p as Merge,M as Search,O as default,u as sharp};
