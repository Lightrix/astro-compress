var v=(...[o={}])=>{Object.entries(o).forEach(([a,e])=>Object.defineProperty(o,a,{value:e===!0?d[a]:o[a]}));const{Path:s,Cache:p,Logger:u,Map:m,Exclude:w,Action:l,CSS:S,HTML:g,Image:j,JavaScript:T,SVG:A,Parser:y}=c(d,o),n=new Set;return typeof s<"u"&&(Array.isArray(s)||s instanceof Set)&&s.forEach(a=>n.add(a)),typeof y=="object"&&Object.entries(y).forEach(([a,e])=>Object.defineProperty(y,a,{value:Array.isArray(e)?e:[e]})),{name:"astro-compress",hooks:{"astro:build:done":async({dir:a})=>{if(typeof m=="object"){n.size||n.add(a),typeof p=="object"&&p.Search===b&&(p.Search=a);for(const[e,r]of Object.entries({CSS:S,HTML:g,Image:j,JavaScript:T,SVG:A})){if(!(r&&m[e]))return;f=c(l,c(l,{Wrote:async({Buffer:t,Input:i})=>{switch(e){case"CSS":return(await import("csso")).minify(t.toString(),r).css;case"HTML":return await(await import("html-minifier-terser")).minify(t.toString(),r);case"JavaScript":return(await(await import("terser")).minify(t.toString(),r)).code??t;case"Image":return console.log(i),(await import("../Function/Image/Writesharp.js")).default(r,{Buffer:t,Input:i});case"SVG":{const{data:I}=(await import("svgo")).optimize(t.toString(),r);return I??t}default:return t}},Fulfilled:async t=>t.Files>0?`Successfully compressed a total of ${t.Files} ${e} ${t.Files===1?"file":"files"} for ${await(await import("files-pipe/Target/Function/Bytes.js")).default(t.Info.Total)}.`:!1})),e==="Image"&&(f=c(f,{Read:async({Input:t})=>{const{format:i}=await h(t).metadata();return h(t,{failOn:"none",sequentialRead:!0,unlimited:!0,animated:i==="webp"||i==="gif"})}}));for(const t of n)await(await(await(await new(await import("files-pipe")).default(p,u).In(t)).By(m[e]??"**/*")).Not(w)).Pipe(f)}}}}}};const{default:d}=await import("../Variable/Option.js"),{default:{Cache:{Search:b}}}=await import("files-pipe/Target/Variable/Option.js"),{default:c}=await import("typescript-esbuild/Target/Function/Merge.js"),{default:h}=await import("sharp");let f;export{d as Default,h as Defaultsharp,c as Merge,b as Search,f as _Action,v as default};
