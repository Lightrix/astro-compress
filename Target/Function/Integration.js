const{default:l}=await import("../Object/Option.js"),{default:c}=await import("files-pipe/Target/Object/Option.js"),{default:p}=await import("files-pipe/Target/Function/Merge.js"),{default:d}=await import("sharp");var B=(r={})=>{for(const e in r)Object.prototype.hasOwnProperty.call(r,e)&&r[e]===!0&&(r[e]=l[e]);const{Path:o,Cache:f,Logger:S,Map:u,Exclude:w,Action:m,CSS:y,HTML:h,Image:I,JavaScript:g,SVG:j}=p(l,r),s=new Set;if(typeof o<"u"&&(o instanceof Array||o instanceof Set))for(const e of o)s.add(e);return{name:"astro-compress",hooks:{"astro:build:done":async({dir:e})=>{s.size||s.add(e),c.Cache&&f&&f.Search===c.Cache.Search&&(f.Search=e);for(const[n,a]of Object.entries({CSS:y,HTML:h,Image:I,JavaScript:g,SVG:j}))if(!(typeof a>"u"||!a))for(const A of s)await(await(await(await new(await import("files-pipe")).default(f,S).In(A)).By(typeof u=="object"?u[n]:"")).Not(w)).Pipe(p(m,p(m,{Wrote:async t=>{switch(n){case"CSS":return(await import("csso")).minify(t.Buffer.toString(),a).css;case"HTML":return await(await import("html-minifier-terser")).minify(t.Buffer.toString(),a);case"JavaScript":return(await(await import("terser")).minify(t.Buffer.toString(),a)).code??t.Buffer;case"Image":return(await import("../Function/Image.js")).default(a,t);case"SVG":{const{data:i}=(await import("svgo")).optimize(t.Buffer.toString(),a);return i||t.Buffer}default:return t.Buffer}},Read:async t=>{switch(n){case"Image":{const{format:i}=await d(t.Input).metadata();return d(t.Input,{failOn:"none",sequentialRead:!0,unlimited:!0,animated:i==="webp"||i==="gif"})}default:return await c.Action.Read(t)}},Fulfilled:async t=>t.Files>0?`Successfully compressed a total of ${t.Files} ${n} ${t.Files===1?"file":"files"} for ${await(await import("files-pipe/Target/Function/Bytes.js")).default(t.Info.Total)}.`:!1})))}}}};export{l as Default,p as Merge,c as _Default,B as default,d as sharp};
