let l;var E=(...[c={}])=>{Object.entries(c).forEach(([a,e])=>Object.defineProperty(c,a,{value:e===!0?u[a]:c[a]}));const{Path:p,Cache:f,Logger:S,Map:d,Exclude:b,Action:h,CSS:j,HTML:I,Image:i,JavaScript:A,SVG:P,Parser:w}=n(u,c),m=new Set;return typeof p<"u"&&(Array.isArray(p)||p instanceof Set)&&p.forEach(a=>m.add(a)),typeof w=="object"&&Object.entries(w).forEach(([a,e])=>Object.defineProperty(w,a,{value:Array.isArray(e)?e:[e]})),{name:"@playform/compress",hooks:{"astro:config:done":async({config:{outDir:{pathname:a}}})=>{l=(await import("path")).parse(a).dir.replace(/\\/g,"/"),l.startsWith("/")&&(l=l.substring(1))},"astro:build:done":async({dir:a})=>{if(console.log(`
${(await import("kleur/colors")).bgGreen((await import("kleur/colors")).black("Compress:"))}`),typeof d=="object"){m.size===0&&m.add(a),typeof f=="object"&&f.Search===x&&(f.Search=a);for(const[e,r]of Object.entries({CSS:j,HTML:I,Image:i,JavaScript:A,SVG:P}))if(!(!(r&&d[e])||typeof r!="object")){y=n(h,n(h,{Wrote:async({Buffer:t,Input:s})=>{switch(e){case"CSS":return(await import("csso")).minify(t.toString(),r.csso).css;case"HTML":return await(await import("html-minifier-terser")).minify(t.toString(),r["html-minifier-terser"]);case"JavaScript":return(await(await import("terser")).minify(t.toString(),r.terser)).code??t;case"Image":try{return t instanceof(await import("sharp")).default?await(await import("./Image/Writesharp.js")).default(r.sharp,{Buffer:t,Input:s}):t}catch(o){return console.log(o),t}case"SVG":return(await import("svgo")).optimize(t.toString(),r.svgo).data??t;default:return t}},Fulfilled:async({File:t,Info:{Total:s}})=>t>0?`${(await import("kleur/colors")).green(`\u2705\u2001Successfully compressed a total of ${t} ${e} ${t===1?"file":"files"} for ${await(await import("@playform/pipe/Target/Function/Bytes.js")).default(s)}.`)}`:!1})),e==="Image"&&(y=n(y,{Read:async({Input:t,Buffer:s})=>{try{(await import("sharp")).default.cache(!1);const{format:o}=await(await import("sharp")).default(t).metadata(),g={animated:o==="webp"||o==="gif"};return(await import("sharp")).default(t,typeof i=="object"&&typeof i.sharp=="object"&&typeof i.sharp.sharp=="object"?n(g,i.sharp?.sharp):g)}catch(o){return console.log(o),s}}}));for(const t of m)await(await(await(await new(await import("@playform/pipe")).default(f,S).In(t)).By(d[e]??"**/*")).Not(b)).Pipe(y)}}}}}};const{default:u}=await import("../Variable/Option.js"),{default:{Cache:{Search:x}}}=await import("@playform/pipe/Target/Variable/Option.js"),{default:n}=await import("./Merge.js");let y;export{u as Default,n as Merge,x as Search,l as System,y as _Action,E as default};
