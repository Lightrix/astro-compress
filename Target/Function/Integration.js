let p;var P=(...[i={}])=>{Object.entries(i).forEach(([e,a])=>Object.defineProperty(i,e,{value:a===!0?w[e]:i[e]}));const{Path:o,Cache:s,Logger:h,Map:l,Exclude:S,Action:u,CSS:b,HTML:j,Image:A,JavaScript:T,SVG:x,Parser:y}=f(w,i),n=new Set;return typeof o<"u"&&(Array.isArray(o)||o instanceof Set)&&o.forEach(e=>n.add(e)),typeof y=="object"&&Object.entries(y).forEach(([e,a])=>Object.defineProperty(y,e,{value:Array.isArray(a)?a:[a]})),{name:"astro-compress",hooks:{"astro:config:done":async({config:{outDir:{pathname:e}}})=>{p=(await import("path")).parse(e).dir.replace(/\\/g,"/"),p.startsWith("/")&&(p=p.substring(1))},"astro:build:done":async({dir:e})=>{if(console.log(`
${(await import("kleur/colors")).bgGreen((await import("kleur/colors")).black(" AstroCompress processing "))}`),typeof l=="object"){n.size||n.add(e),typeof s=="object"&&s.Search===I&&(s.Search=e);for(const[a,r]of Object.entries({CSS:b,HTML:j,Image:A,JavaScript:T,SVG:x}))if(!(!(r&&l[a])||typeof r!="object")){m=f(u,f(u,{Wrote:async({Buffer:t,Input:c})=>{switch(a){case"CSS":return(await import("csso")).minify(t.toString(),r.csso).css;case"HTML":return await(await import("html-minifier-terser")).minify(t.toString(),r["html-minifier-terser"]);case"JavaScript":return(await(await import("terser")).minify(t.toString(),r.terser)).code??t;case"Image":return await(await import("../Function/Image/Writesharp.js")).default(r.sharp,{Buffer:t,Input:c});case"SVG":{const{data:d}=(await import("svgo")).optimize(t.toString(),r.svgo);return d??t}default:return t}},Fulfilled:async t=>t.File>0?`${(await import("kleur/colors")).green(`\u2713 Successfully compressed a total of ${t.File} ${a} ${t.File===1?"file":"files"} for ${await(await import("files-pipe/Target/Function/Bytes.js")).default(t.Info.Total)}.`)}`:!1})),a==="Image"&&(m=f(m,{Read:async({Input:t})=>{const{format:c}=await g(t).metadata();try{return g(t,{failOn:"error",sequentialRead:!0,unlimited:!0,animated:c==="webp"||c==="gif"})}catch(d){console.log(d)}return t}}));for(const t of n)await(await(await(await new(await import("files-pipe")).default(s,h).In(t)).By(l[a]??"**/*")).Not(S)).Pipe(m)}}}}}};const{default:w}=await import("../Variable/Option.js"),{default:{Cache:{Search:I}}}=await import("files-pipe/Target/Variable/Option.js"),{default:f}=await import("../Function/Merge.js"),{default:g}=await import("sharp");let m;export{w as Default,g as Defaultsharp,f as Merge,I as Search,p as System,m as _Action,P as default};
