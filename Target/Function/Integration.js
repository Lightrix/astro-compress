let p;var P=(...[r={}])=>{Object.entries(r).forEach(([a,e])=>Object.defineProperty(r,a,{value:e===!0?u[a]:r[a]}));const{Path:o,Cache:s,Logger:g,Map:l,Exclude:h,Action:d,CSS:S,HTML:b,Image:j,JavaScript:A,SVG:T,Parser:y}=f(u,r),n=new Set;return typeof o<"u"&&(Array.isArray(o)||o instanceof Set)&&o.forEach(a=>n.add(a)),typeof y=="object"&&Object.entries(y).forEach(([a,e])=>Object.defineProperty(y,a,{value:Array.isArray(e)?e:[e]})),{name:"astro-compress",hooks:{"astro:config:done":async a=>{const{dir:e}=(await import("node:path")).parse(a.config.outDir.pathname);p=e.replace(/\\/g,"/"),p.startsWith("/")&&(p=p.substring(1))},"astro:build:done":async({dir:a})=>{if(console.log(`
${(await import("kleur")).bgGreen((await import("kleur")).black(" astro-compress processing "))}`),typeof l=="object"){n.size||n.add(a),typeof s=="object"&&s.Search===x&&(s.Search=a);for(const[e,i]of Object.entries({CSS:S,HTML:b,Image:j,JavaScript:A,SVG:T})){if(!(i&&l[e])||typeof i!="object")return;m=f(d,f(d,{Wrote:async({Buffer:t,Input:c})=>{switch(e){case"CSS":return(await import("csso")).minify(t.toString(),i.csso).css;case"HTML":return await(await import("html-minifier-terser")).minify(t.toString(),i["html-minifier-terser"]);case"JavaScript":return(await(await import("terser")).minify(t.toString(),i.terser)).code??t;case"Image":return await(await import("../Function/Image/Writesharp.js")).default(i.sharp,{Buffer:t,Input:c});case"SVG":{const{data:I}=(await import("svgo")).optimize(t.toString(),i.svgo);return I??t}default:return t}},Fulfilled:async t=>t.Files>0?`\u2514\u25B6 ${(await import("kleur")).cyan(`Successfully compressed a total of ${t.Files} ${e} ${t.Files===1?"file":"files"} for ${await(await import("files-pipe/Target/Function/Bytes.js")).default(t.Info.Total)}.`)}`:!1})),e==="Image"&&(m=f(m,{Read:async({Input:t})=>{const{format:c}=await w(t).metadata();return w(t,{failOn:"none",sequentialRead:!0,unlimited:!0,animated:c==="webp"||c==="gif"})}}));for(const t of n)await(await(await(await new(await import("files-pipe")).default(s,g).In(t)).By(l[e]??"**/*")).Not(h)).Pipe(m)}}}}}};const{default:u}=await import("../Variable/Option.js"),{default:{Cache:{Search:x}}}=await import("files-pipe/Target/Variable/Option.js"),{default:f}=await import("typescript-esbuild/Target/Function/Merge.js"),{default:w}=await import("sharp");let m;export{u as Default,w as Defaultsharp,f as Merge,x as Search,m as _Action,P as default,p as systemDir};
