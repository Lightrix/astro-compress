let p;var x=(...[o={}])=>{Object.entries(o).forEach(([e,a])=>Object.defineProperty(o,e,{value:a===!0?u[e]:o[e]}));const{Path:s,Cache:n,Logger:g,Map:l,Exclude:h,Action:w,CSS:S,HTML:b,Image:j,JavaScript:A,SVG:P,Parser:y}=f(u,o),c=new Set;return typeof s<"u"&&(Array.isArray(s)||s instanceof Set)&&s.forEach(e=>c.add(e)),typeof y=="object"&&Object.entries(y).forEach(([e,a])=>Object.defineProperty(y,e,{value:Array.isArray(a)?a:[a]})),{name:"compress-astro",hooks:{"astro:config:done":async({config:{outDir:{pathname:e}}})=>{p=(await import("path")).parse(e).dir.replace(/\\/g,"/"),p.startsWith("/")&&(p=p.substring(1))},"astro:build:done":async({dir:e})=>{if(console.log(`
${(await import("kleur/colors")).bgGreen((await import("kleur/colors")).black(" CompressAstro "))}`),typeof l=="object"){c.size||c.add(e),typeof n=="object"&&n.Search===T&&(n.Search=e);for(const[a,i]of Object.entries({CSS:S,HTML:b,Image:j,JavaScript:A,SVG:P}))if(!(!(i&&l[a])||typeof i!="object")){m=f(w,f(w,{Wrote:async({Buffer:t,Input:r})=>{switch(a){case"CSS":return(await import("csso")).minify(t.toString(),i.csso).css;case"HTML":return await(await import("html-minifier-terser")).minify(t.toString(),i["html-minifier-terser"]);case"JavaScript":return(await(await import("terser")).minify(t.toString(),i.terser)).code??t;case"Image":return await(await import("../Function/Image/Writesharp.js")).default(i.sharp,{Buffer:t,Input:r});case"SVG":{const{data:I}=(await import("svgo")).optimize(t.toString(),i.svgo);return I??t}default:return t}},Fulfilled:async({File:t,Info:{Total:r}})=>t>0?`${(await import("kleur/colors")).green(`\u2713\u2000Successfully compressed a total of ${t} ${a} ${t===1?"file":"files"} for ${await(await import("files-pipe/Target/Function/Bytes.js")).default(r)}.`)}`:!1})),a==="Image"&&(m=f(m,{Read:async({Input:t})=>{const{format:r}=await d(t).metadata();return d(t,{failOn:"error",sequentialRead:!0,unlimited:!0,animated:r==="webp"||r==="gif"})}}));for(const t of c)await(await(await(await new(await import("files-pipe")).default(n,g).In(t)).By(l[a]??"**/*")).Not(h)).Pipe(m)}}}}}};const{default:u}=await import("../Variable/Option.js"),{default:{Cache:{Search:T}}}=await import("files-pipe/Target/Variable/Option.js"),{default:f}=await import("../Function/Merge.js"),{default:d}=await import("sharp");d.cache(!1);let m;export{u as Default,d as Defaultsharp,f as Merge,T as Search,p as System,m as _Action,x as default};
