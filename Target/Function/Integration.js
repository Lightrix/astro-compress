var M=(...[i={}])=>{for(const a in i)Object.prototype.hasOwnProperty.call(i,a)&&i[a]===!0&&(i[a]=y[a]);const{Path:o,Cache:s,Logger:d,Map:m,Exclude:u,Action:l,CSS:w,HTML:g,Image:h,JavaScript:I,SVG:j}=c(y,i),n=new Set;if(typeof o<"u"&&(Array.isArray(o)||o instanceof Set))for(const a of o)n.add(a);return{name:"astro-compress",hooks:{"astro:build:done":async({dir:a})=>{if(typeof m=="object"){n.size||n.add(a),typeof s=="object"&&s.Search===A&&(s.Search=a);for(const[r,e]of Object.entries({CSS:w,HTML:g,Image:h,JavaScript:I,SVG:j})){if(!(e&&m[r]))return;f=c(l,c(l,{Wrote:async({Buffer:t,Input:p})=>{switch(r){case"CSS":return(await import("csso")).minify(t.toString(),e).css;case"HTML":return await(await import("html-minifier-terser")).minify(t.toString(),e);case"JavaScript":return(await(await import("terser")).minify(t.toString(),e)).code??t;case"Image":return(await import("../Function/Image.js")).default(e,{Buffer:t,Input:p});case"SVG":{const{data:T}=(await import("svgo")).optimize(t.toString(),e);return T??t}default:return t}},Fulfilled:async t=>t.Files>0?`Successfully compressed a total of ${t.Files} ${r} ${t.Files===1?"file":"files"} for ${await(await import("files-pipe/Target/Function/Bytes.js")).default(t.Info.Total)}.`:!1})),r==="Image"&&(f=c(f,{Read:async({Input:t})=>{const{format:p}=await S(t).metadata();return S(t,{failOn:"none",sequentialRead:!0,unlimited:!0,animated:p==="webp"||p==="gif"})}}));for(const t of n)await(await(await(await new x(s,d).In(t)).By(m[r]??"**/*")).Not(u)).Pipe(f)}}}}}};const{default:y}=await import("../Variable/Option.js"),{default:{Cache:{Search:A}}}=await import("files-pipe/Target/Variable/Option.js"),{default:c}=await import("typescript-esbuild/Target/Function/Merge.js"),{default:S}=await import("sharp");let f;const{default:x}=await import("files-pipe");export{y as Default,x as Files,c as Merge,A as Search,f as _Action,M as default,S as sharp};
