const{default:d}=await import("../Object/Option.js"),{default:u}=await import("files-pipe/Target/Object/Option.js"),{default:p}=await import("files-pipe/Target/Function/Merge.js"),{default:y}=await import("sharp");var M=(i={})=>{for(const a in i)Object.prototype.hasOwnProperty.call(i,a)&&i[a]===!0&&(i[a]=d[a]);const{Path:r,Cache:n,Logger:w,Map:f,Exclude:g,Action:l,CSS:h,HTML:I,Image:j,JavaScript:A,SVG:C}=p(d,i),s=new Set;if(typeof r<"u"&&(r instanceof Array||r instanceof Set))for(const a of r)s.add(a);return{name:"astro-compress",hooks:{"astro:build:done":async({dir:a})=>{if(typeof f=="object"){s.size||s.add(a),u.Cache&&n&&n.Search===u.Cache.Search&&(n.Search=a);for(const[o,e]of Object.entries({CSS:h,HTML:I,Image:j,JavaScript:A,SVG:C})){if(!e||!f[o])continue;let m=p(l,p(l,{Wrote:async({Buffer:t,Input:c})=>{switch(o){case"CSS":return(await import("csso")).minify(t.toString(),e).css;case"HTML":return await(await import("html-minifier-terser")).minify(t.toString(),e);case"JavaScript":return(await(await import("terser")).minify(t.toString(),e)).code??t;case"Image":return(await import("../Function/Image.js")).default(e,{Buffer:t,Input:c});case"SVG":{const{data:S}=(await import("svgo")).optimize(t.toString(),e);return S||t}default:return t}},Fulfilled:async t=>t.Files>0?`Successfully compressed a total of ${t.Files} ${o} ${t.Files===1?"file":"files"} for ${await(await import("files-pipe/Target/Function/Bytes.js")).default(t.Info.Total)}.`:!1}));o==="Image"&&(m=p(m,{Read:async({Input:t})=>{const{format:c}=await y(t).metadata();return y(t,{failOn:"none",sequentialRead:!0,unlimited:!0,animated:c==="webp"||c==="gif"})}}));for(const t of s)await(await(await(await new(await import("files-pipe")).default(n,w).In(t)).By(f[o])).Not(g)).Pipe(m)}}}}}};export{d as Default,p as Merge,u as _Default,M as default,y as sharp};
