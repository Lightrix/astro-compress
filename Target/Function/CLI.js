let m;var x=async(...[c={}])=>{Object.entries(c).forEach(([e,a])=>Object.defineProperty(c,e,{value:a===!0?u[e]:c[e]}));const{Path:n,Cache:p,Logger:S,Map:y,Exclude:b,Action:d,CSS:j,HTML:I,Image:s,JavaScript:A,SVG:P,Parser:w}=o(u,c),f=new Set;if(typeof n<"u"&&(Array.isArray(n)||n instanceof Set)&&n.forEach(e=>f.add(e)),typeof w=="object"&&Object.entries(w).forEach(([e,a])=>Object.defineProperty(w,e,{value:Array.isArray(a)?a:[a]})),m=(await import("path")).parse((await import("process")).cwd()).dir.replace(/\\/g,"/"),m.startsWith("/")&&(m=m.substring(1)),console.log(`
${(await import("kleur/colors")).bgGreen((await import("kleur/colors")).black("Compress:"))}`),typeof y!="object")return;const h="OutputCompress";f.size===0&&f.add(h),typeof p=="object"&&p.Search===C&&(p.Search=h);for(const[e,a]of Object.entries({CSS:j,HTML:I,Image:s,JavaScript:A,SVG:P}))if(!(!(a&&y[e])||typeof a!="object")){l=o(d,o(d,{Wrote:async({Buffer:t,Input:i})=>{switch(e){case"CSS":{let r=t.toString();return a.lightningcss&&(r=(await import("lightningcss")).transform(o({code:(await import("buffer")).Buffer.from(r),filename:i},a.lightningcss)).code.toString()),a.csso&&(r=(await import("csso")).minify(r,a.csso).css),r}case"HTML":return await(await import("html-minifier-terser")).minify(t.toString(),a["html-minifier-terser"]);case"JavaScript":return(await(await import("terser")).minify(t.toString(),a.terser)).code??t;case"Image":try{return t instanceof(await import("sharp")).default?await(await import("./Image/Writesharp.js")).default(a.sharp,{Buffer:t,Input:i}):t}catch(r){return console.log(r),t}case"SVG":return(await import("svgo")).optimize(t.toString(),a.svgo).data??t;default:return t}},Fulfilled:async({File:t,Info:{Total:i}})=>t>0?`${(await import("kleur/colors")).green(`\u2705\u2001Successfully compressed a total of ${t} ${e} ${t===1?"file":"files"} for ${(await import("@playform/pipe/Target/Function/Bytes.js")).default(i)}.`)}`:!1})),e==="Image"&&(l=o(l,{Read:async({Input:t,Buffer:i})=>{try{(await import("sharp")).default.cache(!1);const{format:r}=await(await import("sharp")).default(t).metadata(),g={animated:r==="webp"||r==="gif"};return(await import("sharp")).default(t,typeof s=="object"&&typeof s.sharp=="object"&&typeof s.sharp.sharp=="object"?o(g,s.sharp?.sharp):g)}catch(r){return console.log(r),i}}}));for(const t of f)await(await(await(await new(await import("@playform/pipe")).default(p,S).In(t)).By(y[e]??"**/*")).Not(b)).Pipe(l)}};const{default:u}=await import("../Variable/Option.js"),{default:{Cache:{Search:C}}}=await import("@playform/pipe/Target/Variable/Option.js"),{default:o}=await import("./Merge.js");let l;export{u as Default,o as Merge,C as Search,m as System,l as _Action,x as default};
