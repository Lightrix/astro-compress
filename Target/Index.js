import{minify as m}from"csso";import{Bytes as d,Files as l,Merge as n,Default as y}from"files-pipe";import{minify as S}from"html-minifier-terser";import p from"sharp";import{optimize as h}from"svgo";import{minify as w}from"terser";import g from"./Library/SharpRead.js";import u from"./Option/Index.js";var R=(i={})=>{for(const r in i)Object.prototype.hasOwnProperty.call(i,r)&&i[r]===!0&&(i[r]=u[r]);const e=n(u,i),f=new Set;if(typeof e.Path<"u"&&(e.Path instanceof Array||e.Path instanceof Set))for(const r of e.Path)f.add(r);return{name:"astro-compress",hooks:{"astro:build:done":async({dir:r})=>{f.size||f.add(r);for(const[s,o]of Object.entries(e))if(o)for(const c of f)await(await(await(await new l(e.Logger).In(c)).By(typeof e.Map=="object"?e.Map[s]:"")).Not(e.Exclude)).Pipe(n(e.Action,n(e.Action,{Wrote:async t=>{switch(s){case"CSS":return m(t.Buffer.toString(),o).css;case"HTML":return await S(t.Buffer.toString(),o);case"JavaScript":{const{code:a}=await w(t.Buffer.toString(),o);return a||t.Buffer}case"Image":return g(o,t);case"SVG":{const{data:a}=h(t.Buffer.toString(),o);return typeof a<"u"?a:t.Buffer}default:return t.Buffer}},Read:async t=>{switch(s){case"Image":{const{format:a}=await p(t.Input).metadata();return p(t.Input,{failOn:"none",sequentialRead:!0,unlimited:!0,animated:a==="webp"||a==="gif"})}default:return await y.Action.Read(t)}},Fulfilled:async t=>t.Files>0?`Successfully compressed a total of ${t.Files} ${s} ${t.Files===1?"file":"files"} for ${await d(t.Info.Total)}.`:!1})))}}}};export{R as default};
