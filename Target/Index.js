import{minify as u}from"csso";import{Bytes as m,Files as l,Merge as n}from"files-pipe";import{minify as d}from"html-minifier-terser";import{optimize as y}from"svgo";import{minify as S}from"terser";import c from"./Option/Index.js";var M=(r={})=>{for(const o in r)Object.prototype.hasOwnProperty.call(r,o)&&r[o]===!0&&(r[o]=c[o]);const t=n(c,r),f=new Set;if(typeof t.Path<"u"&&(t.Path instanceof Array||t.Path instanceof Set))for(const o of t.Path)f.add(o);return{name:"astro-compress",hooks:{"astro:build:done":async({dir:o})=>{f.size||f.add(o);for(const[s,i]of Object.entries(t))if(i)for(const p of f)await(await(await(await new l(t.Cache,t.Logger).In(p)).By(typeof t.Map=="object"?t.Map[s]:"")).Not(t.Exclude)).Pipe(n(t.Action,n(t.Action,{Wrote:async e=>{switch(s){case"CSS":return u(e.Buffer.toString(),i).css;case"HTML":return await d(e.Buffer.toString(),i);case"JavaScript":{const{code:a}=await S(e.Buffer.toString(),i);return a||e.Buffer}case"SVG":{const{data:a}=y(e.Buffer.toString(),i);return typeof a<"u"?a:e.Buffer}default:return e.Buffer}},Fulfilled:async e=>e.Files>0?`Successfully compressed a total of ${e.Files} ${s} ${e.Files===1?"file":"files"} for ${await m(e.Info.Total)}.`:!1})))}}}};export{M as default};
